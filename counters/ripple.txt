module ripplecounter(
    input clk,
    output Q1,
    output Q2,
    output Q3,
    output Q4
    );
    JKFF j1(1,1,clk,Q1);
    JKFF j2(1,1,~Q1,Q2);
    JKFF j3(1,1,~Q2,Q3);
    JKFF j4(1,1,~Q3,Q4);
    
    
    
    
endmodule

module JKFF(
    input J,
    input K,
    input clk,
    output Q,
    output Qb
    );
    reg Q,Qb;
    initial 
    begin
    Q=1'b0;Qb=~Q;
    end
    always@(posedge clk)
    begin
    casex({J,K})
    { 1'b0,1'b0 } :begin Q=Q; Qb=Qb; end
    { 1'b0,1'b1 } :begin Q=1'b0; Qb=1'b1; end
    { 1'b1,1'b0 } :begin Q=1'b1; Qb=1'b0; end
    { 1'b1,1'b1 } :begin Q=~Q; Qb=~Qb; end
    endcase
    end
         
endmodule


module ripplecounter_tb;
reg clk;
wire Q1,Q2,Q3,Q4;
ripplecounter a1(clk,Q1,Q2,Q3,Q4);
initial
begin
clk=0;
forever #10 clk=~clk;
end
endmodule
