module full_adder_behave(
    input a,
    input b,
    input c,
    output sum,
    output carry
    );
    reg sum,carry;
    always@(a or b or c)
    begin
    if((a==1'b0)&&(b==1'b0)&&(c==1'b0))
    begin
    sum=0;
    carry=0;
    end
    else if(a==1'b0&&b==1'b0&&c==1'b1)
    begin
    sum=1;
    carry=0;
    end
    else if((a==1'b0)&&(b==1'b1)&&(c==1'b0))
    begin
    sum=1;
    carry=0;
    end
    else if((a==1'b0)&&(b==1'b1)&&(c==1'b1))
    begin
    sum=0;
    carry=1;
    end
    else if((a==1'b1)&&(b==1'b0)&&(c==1'b0))
    begin
    sum=1;
    carry=0;
    end   
    else if((a==1'b1)&&(b==1'b0)&&(c==1'b1))
    begin
    sum=0;
    carry=1;
    end
    else if((a==1'b1)&&(b==1'b1)&&(c==1'b0))
    begin
    sum=0;
    carry=1;
    end
    else if((a==1'b1)&&(b==1'b0)&&(c==1'b1))
    begin
    sum=1;
    carry=1;
    end
    end     
endmodule


module full_adder_behave_tb;
reg a,b,c;
wire sum,carry;
full_adder_behave a1(a,b,c,sum,carry);
initial
begin
a=0;b=0;c=0;
#10 a=0;b=0;c=1;
#10 a=0;b=1;c=0;
#10 a=0;b=1;c=1;
#10 a=1;b=0;c=0;
#10 a=1;b=0;c=1;
#10 a=1;b=1;c=0;
#10 a=1;b=1;c=1;
end
endmodule
